// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v4.22.2
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthActivate = "/auth.v1.Auth/Activate"
const OperationAuthLogout = "/auth.v1.Auth/Logout"
const OperationAuthRegister = "/auth.v1.Auth/Register"
const OperationAuthToken = "/auth.v1.Auth/Token"

type AuthHTTPServer interface {
	Activate(context.Context, *ActivateRequest) (*emptypb.Empty, error)
	Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error)
	Register(context.Context, *GrantRequest) (*GrantAccess, error)
	Token(context.Context, *GrantRequest) (*GrantAccess, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/register", _Auth_Register0_HTTP_Handler(srv))
	r.POST("/auth/token", _Auth_Token0_HTTP_Handler(srv))
	r.POST("/auth/logout", _Auth_Logout0_HTTP_Handler(srv))
	r.POST("/auth/activate/{userId}", _Auth_Activate0_HTTP_Handler(srv))
}

func _Auth_Register0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*GrantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAccess)
		return ctx.Result(200, reply)
	}
}

func _Auth_Token0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Token(ctx, req.(*GrantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAccess)
		return ctx.Result(200, reply)
	}
}

func _Auth_Logout0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Auth_Activate0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthActivate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Activate(ctx, req.(*ActivateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	Activate(ctx context.Context, req *ActivateRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Register(ctx context.Context, req *GrantRequest, opts ...http.CallOption) (rsp *GrantAccess, err error)
	Token(ctx context.Context, req *GrantRequest, opts ...http.CallOption) (rsp *GrantAccess, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) Activate(ctx context.Context, in *ActivateRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth/activate/{userId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthActivate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Register(ctx context.Context, in *GrantRequest, opts ...http.CallOption) (*GrantAccess, error) {
	var out GrantAccess
	pattern := "/auth/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Token(ctx context.Context, in *GrantRequest, opts ...http.CallOption) (*GrantAccess, error) {
	var out GrantAccess
	pattern := "/auth/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationHealthCheckHealthCheck = "/auth.v1.HealthCheck/HealthCheck"

type HealthCheckHTTPServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*structpb.Struct, error)
}

func RegisterHealthCheckHTTPServer(s *http.Server, srv HealthCheckHTTPServer) {
	r := s.Route("/")
	r.GET("/auth/healthcheck", _HealthCheck_HealthCheck0_HTTP_Handler(srv))
}

func _HealthCheck_HealthCheck0_HTTP_Handler(srv HealthCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthCheckHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*structpb.Struct)
		return ctx.Result(200, reply)
	}
}

type HealthCheckHTTPClient interface {
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *structpb.Struct, err error)
}

type HealthCheckHTTPClientImpl struct {
	cc *http.Client
}

func NewHealthCheckHTTPClient(client *http.Client) HealthCheckHTTPClient {
	return &HealthCheckHTTPClientImpl{client}
}

func (c *HealthCheckHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*structpb.Struct, error) {
	var out structpb.Struct
	pattern := "/auth/healthcheck"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthCheckHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
